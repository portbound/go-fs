// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createFileMeta = `-- name: CreateFileMeta :exec
INSERT INTO file_meta (
	id, parent_id, thumb_id, name, content_type, size, upload_date, owner 
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateFileMetaParams struct {
	ID          string         `json:"id"`
	ParentID    sql.NullString `json:"parent_id"`
	ThumbID     sql.NullString `json:"thumb_id"`
	Name        string         `json:"name"`
	ContentType string         `json:"content_type"`
	Size        int64          `json:"size"`
	UploadDate  string         `json:"upload_date"`
	Owner       string         `json:"owner"`
}

func (q *Queries) CreateFileMeta(ctx context.Context, arg CreateFileMetaParams) error {
	_, err := q.exec(ctx, q.createFileMetaStmt, createFileMeta,
		arg.ID,
		arg.ParentID,
		arg.ThumbID,
		arg.Name,
		arg.ContentType,
		arg.Size,
		arg.UploadDate,
		arg.Owner,
	)
	return err
}

const deleteFileMeta = `-- name: DeleteFileMeta :exec
DELETE FROM file_meta 
WHERE id = ?
AND owner = ?
`

type DeleteFileMetaParams struct {
	ID    string `json:"id"`
	Owner string `json:"owner"`
}

func (q *Queries) DeleteFileMeta(ctx context.Context, arg DeleteFileMetaParams) error {
	_, err := q.exec(ctx, q.deleteFileMetaStmt, deleteFileMeta, arg.ID, arg.Owner)
	return err
}

const getAllFileMeta = `-- name: GetAllFileMeta :many
SELECT id, parent_id, thumb_id, name, content_type, size, upload_date, owner FROM file_meta
ORDER BY upload_date
`

func (q *Queries) GetAllFileMeta(ctx context.Context) ([]FileMetum, error) {
	rows, err := q.query(ctx, q.getAllFileMetaStmt, getAllFileMeta)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileMetum
	for rows.Next() {
		var i FileMetum
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.ThumbID,
			&i.Name,
			&i.ContentType,
			&i.Size,
			&i.UploadDate,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileMeta = `-- name: GetFileMeta :one
SELECT id, parent_id, thumb_id, name, content_type, size, upload_date, owner FROM file_meta 
WHERE id = ? 
LIMIT 1
`

func (q *Queries) GetFileMeta(ctx context.Context, id string) (FileMetum, error) {
	row := q.queryRow(ctx, q.getFileMetaStmt, getFileMeta, id)
	var i FileMetum
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ThumbID,
		&i.Name,
		&i.ContentType,
		&i.Size,
		&i.UploadDate,
		&i.Owner,
	)
	return i, err
}

const getFileMetaByNameAndOwner = `-- name: GetFileMetaByNameAndOwner :one
SELECT id, parent_id, thumb_id, name, content_type, size, upload_date, owner FROM file_meta
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetFileMetaByNameAndOwner(ctx context.Context, name string) (FileMetum, error) {
	row := q.queryRow(ctx, q.getFileMetaByNameAndOwnerStmt, getFileMetaByNameAndOwner, name)
	var i FileMetum
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ThumbID,
		&i.Name,
		&i.ContentType,
		&i.Size,
		&i.UploadDate,
		&i.Owner,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, bucket_name FROM users 
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.BucketName)
	return i, err
}
