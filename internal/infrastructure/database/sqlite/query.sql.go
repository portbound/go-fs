// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const create = `-- name: Create :exec
INSERT INTO files (
	id, filename, original_filename, owner, content_type, filesize, upload_date, storage_path
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateParams struct {
	ID               uuid.UUID `json:"id"`
	Filename         string    `json:"filename"`
	OriginalFilename string    `json:"original_filename"`
	Owner            string    `json:"owner"`
	ContentType      string    `json:"content_type"`
	Filesize         int64     `json:"filesize"`
	UploadDate       string    `json:"upload_date"`
	StoragePath      string    `json:"storage_path"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.exec(ctx, q.createStmt, create,
		arg.ID,
		arg.Filename,
		arg.OriginalFilename,
		arg.Owner,
		arg.ContentType,
		arg.Filesize,
		arg.UploadDate,
		arg.StoragePath,
	)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM files 
WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteStmt, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, filename, original_filename, owner, content_type, filesize, upload_date, modified_date, storage_path FROM files 
WHERE id = ? LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.queryRow(ctx, q.getStmt, get, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.OriginalFilename,
		&i.Owner,
		&i.ContentType,
		&i.Filesize,
		&i.UploadDate,
		&i.ModifiedDate,
		&i.StoragePath,
	)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT id, filename, original_filename, owner, content_type, filesize, upload_date, modified_date, storage_path FROM files 
ORDER BY upload_date
`

func (q *Queries) GetAll(ctx context.Context) ([]File, error) {
	rows, err := q.query(ctx, q.getAllStmt, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.OriginalFilename,
			&i.Owner,
			&i.ContentType,
			&i.Filesize,
			&i.UploadDate,
			&i.ModifiedDate,
			&i.StoragePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE files 
set filename = ?, filesize = ?, modified_date = ?, storage_path = ?
WHERE id = ?
`

type UpdateParams struct {
	Filename     string         `json:"filename"`
	Filesize     int64          `json:"filesize"`
	ModifiedDate sql.NullString `json:"modified_date"`
	StoragePath  string         `json:"storage_path"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.exec(ctx, q.updateStmt, update,
		arg.Filename,
		arg.Filesize,
		arg.ModifiedDate,
		arg.StoragePath,
		arg.ID,
	)
	return err
}
