// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const create = `-- name: Create :exec
INSERT INTO files (
	id, parent_id, thumb_id, name, content_type, size, upload_date, owner
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateParams struct {
	ID          string         `json:"id"`
	ParentID    sql.NullString `json:"parent_id"`
	ThumbID     sql.NullString `json:"thumb_id"`
	Name        string         `json:"name"`
	ContentType string         `json:"content_type"`
	Size        int64          `json:"size"`
	UploadDate  string         `json:"upload_date"`
	Owner       string         `json:"owner"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.exec(ctx, q.createStmt, create,
		arg.ID,
		arg.ParentID,
		arg.ThumbID,
		arg.Name,
		arg.ContentType,
		arg.Size,
		arg.UploadDate,
		arg.Owner,
	)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM files 
WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteStmt, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, parent_id, thumb_id, name, content_type, size, upload_date, owner FROM files 
WHERE id = ? LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id string) (File, error) {
	row := q.queryRow(ctx, q.getStmt, get, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ThumbID,
		&i.Name,
		&i.ContentType,
		&i.Size,
		&i.UploadDate,
		&i.Owner,
	)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT id, parent_id, thumb_id, name, content_type, size, upload_date, owner FROM files
ORDER BY upload_date
`

func (q *Queries) GetAll(ctx context.Context) ([]File, error) {
	rows, err := q.query(ctx, q.getAllStmt, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.ThumbID,
			&i.Name,
			&i.ContentType,
			&i.Size,
			&i.UploadDate,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
